#!/usr/bin/env python3

from os.path import join, realpath, dirname
import subprocess, argparse
from werbs import Werbs
from simple_term_menu import TerminalMenu

parser = argparse.ArgumentParser()

parser.add_argument("describe_deployments_pos", help="Get deployments", type=str, nargs='*')

# command arguments group
cagroup=parser.add_argument_group('Werb arguments')

# service arguments group
sagroup=parser.add_argument_group('Service arguments')

cagroup.add_argument('-l', '--list',
                     action='store_true',
                     dest='list',
                     help='Suppress Output'
                     )

sagroup.add_argument('-o', '--output',
                     type=str,
                     dest='output',
                     help='output format json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]'
                     )

sagroup.add_argument('-A', '--all-namespaces',
                     action='store_true',
                     dest='all_namespaces',
                     help='Operate with resources from all namespaces'
                     )

sagroup.add_argument('--rpl', '--replicas',
                     type=int,
                     dest='replicas',
                     help='Set number of replicas to scale deployment'
                     )

cagroup.add_argument('-d', '--describe',
                     type=str,
                     dest='describe',
                     help='describe deployments'
                     )

cagroup.add_argument('-e', '--edit',
                    type=str,
                    dest='edit',
                    help='edit deployments'
                    )

cagroup.add_argument('-s', '--shell',
                    type=str,
                    dest='shell',
                    help='login deployment`s container'
                    )

cagroup.add_argument('--scale',
                    type=str,
                    dest='scale',
                    help='scale deployments'
                    )

cagroup.add_argument('--del', '--delete',
                    type=str,
                    dest='delete',
                    help='delete pod'
                    )

cagroup.add_argument('--cl', '--containers-list',
                    type=str,
                    dest='containers_list',
                    help='Get list of pod`s running containers'
                    )

sagroup.add_argument('-t', '--trace',
                    action='store_true',
                    dest='trace',
                    help='trace real kubectl commands'
                    )

sagroup.add_argument('--container',
                    type=str,
                    dest='container_name',
                    help='Operate with single container inside of deployment'
                    )

sagroup.add_argument('--labels',
                    type=str,
                    dest='labels',
                    help='Use label to filter out resources'
                    )

sagroup.add_argument('-v', '--version',
                    action='store_true',
                    dest='version',
                    help='show version of application'
                    )

cagroup.add_argument('--wat',
                    action='store_true',
                    dest='wat',
                    help='Manual about kubernetes deployments'
                    )

args = parser.parse_args()

global out_suffix, kctl_bin, werbs

kctl_bin = "kubectl"

config=join(dirname(realpath(__file__)), 'ksx.json')

werbs = Werbs(config_path=config, out_format=args.output, labels=args.labels, kctl_bin=kctl_bin, all_ns=args.all_namespaces, trace=args.trace)

if args.output:
    out_suffix = " -o " + args.output
else:
    out_suffix = ""

    
if args.list:
    werbs.print_of("deployments")
elif args.describe:
    werbs.describe_of("deployments/{}".format(args.describe))
elif args.edit:
    werbs.edit_of("deployments/{}".format(args.edit))
elif args.scale:
    if isinstance (args.replicas,int):
        werbs.scale_of("deployments/{}".format(args.scale), args.replicas)
    else:
        raise TypeError("argument --replicas must be passed")
elif args.delete:
    werbs.delete_of("deployments/{}".format(args.delete))
elif args.wat:
    werbs.explain_of("deployments")
elif args.version:
    werbs.print_version()
elif args.describe_deployments_pos:
    werbs.describe_of("deployments/{}".format(args.describe_deployments_pos[0]))
elif args.containers_list:
    print(werbs.list_of_containers("deployment", args.containers_list))
elif args.shell:
    if args.container_name:
        werbs.shell_to_container("deployment", args.shell, args.container_name)
    else:
        werbs.shell_to_object("deployment", args.shell)
else: # default action is "get namespaces"
    werbs.print_of("deployments")
