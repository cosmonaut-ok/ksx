#!/usr/bin/env python3

import subprocess, argparse
from werbs import Werbs

parser = argparse.ArgumentParser()

parser.add_argument("describe_pvc_pos", help="Get pvc", type=str, nargs='*')

parser.add_argument('-l', '--list',
                    action='store_true',
                    dest='list',
                    help='Suppress Output'
                    )

parser.add_argument('-o', '--output',
                    type=str,
                    dest='output',
                    help='output format json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]'
                    )

parser.add_argument('-s', '--shell',
                    type=str,
                    dest='shell',
                    help='Run shell on a selected pvc'
                    )

parser.add_argument('--cl', '--containers-list',
                    type=str,
                    dest='containers_list',
                    help='Get list of pvc`s running containers'
                    )

parser.add_argument('--container',
                    type=str,
                    dest='container_name',
                    help='Operate with single container inside of multicontainer pvc'
                    )

parser.add_argument('-A', '--all-namespaces',
                    action='store_true',
                    dest='all_namespaces',
                    help='Operate with resources from all namespaces'
                    )

parser.add_argument('-d', '--describe',
                    type=str,
                    dest='describe',
                    help='describe namespace'
                    )

parser.add_argument('-t', '--trace',
                    action='store_true',
                    dest='trace',
                    help='trace real kubectl commands'
                    )

parser.add_argument('--labels',
                    type=str,
                    dest='labels',
                    help='Use label to filter out resources'
                    )

parser.add_argument('--wat',
                    action='store_true',
                    dest='wat',
                    help='Manual about kubernetes pvc'
                    )

args = parser.parse_args()

global out_suffix, kctl_bin, werbs, pvc_shell

kctl_bin = "kubectl"
pvc_shell = "/bin/bash"

werbs = Werbs(out_format=args.output, labels=args.labels, kctl_bin=kctl_bin, all_ns=args.all_namespaces, trace=args.trace)

if args.output:
    out_suffix = " -o " + args.output
else:
    out_suffix = ""

def shell_to_pvc(name):
    cmd = "{} exec --stdin --tty pvc/{} -- {}".format(kctl_bin, name, pvc_shell)
    if args.trace:
        ns = werbs.current_namespace()
        ctx = werbs.current_context()
        print("cmd: `{}`; namespace: `{}`; context: `{}`".format(cmd, ns, ctx))

    subprocess.call(cmd, shell=True)

def shell_to_pvc_container(pvc_name, container_name):
    cmd = "{} exec --stdin --tty pvc/{} --container {} -- {}".format(kctl_bin, pvc_name, container_name, pvc_shell)
    if args.trace:
        ns = werbs.current_namespace()
        ctx = werbs.current_context()
        print("cmd: `{}`; namespace: `{}`; context: `{}`".format(cmd, ns, ctx))

    subprocess.call(cmd, shell=True)


def containers_list(name):
    cmd = "{} get pvc/{}".format(kctl_bin, name)
    cmd += " -o=jsonpath='{.spec.containers[*].name}'"
    out = subprocess.getoutput(cmd)
    return out

    
if args.list:
    werbs.print_of("pvc")
elif args.shell:
    if args.container_name:
        shell_to_pvc_container(args.shell, args.container_name)
    else:
        shell_to_pvc(args.shell)
elif args.containers_list:
    print(containers_list(args.containers_list))
elif args.describe:
    werbs.describe_of("pvc/{}".format(args.describe))
elif args.wat:
    werbs.explain_of("pvc")
elif args.describe_pvc_pos:
    werbs.describe_of("pvc/{}".format(args.describe_pvc_pos[0]))
else: # default action is "get namespaces"
    werbs.print_of("pvc")
