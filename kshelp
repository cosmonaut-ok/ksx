#!/usr/bin/env python3

print('''ks<X> is a kubernetes tool collection, wrapped over standard
kubernetes control tool `kubectl`.  The motivation of ksX is to
develop more `laconic` kubectl, that also follows unix way principle:
`Make each program do one thing well` and principle of least
astonishment. So, each ksX's tool is very simple and bound to some
kubernetes resouce, like `pod`, `ingress` etc. The list of ksX tools:

ksc\t- operate with contexts
kscj\t- operate with cronjobs
kscm\t- operate with configmaps
ksd\t- operate with deployments
ksi\t- operate with ingress
ksj\t- operate with jobs
ksn\t- operate with namespaces
ksp\t- operate with pods
kspv\t- operate with persistant volumes
kspvc\t- operate with persistant volume claims
kss\t- operate with services
ksts\t- operate with stateful sets

OPTIONS (common for all tools):
  one optional positional argument
  with default action (depends on tool):
  -h, --help\t\t\t\tshow help message and exit
  -l, --list\t\t\t\tlist of objects of selected type
  -d <OBJECT>, --describe <OBJECT>\tdescribe object
  -e <OBJECT>, --edit <OBJECT>\t\tedit object
  --del <OBJECT>, --delete <OBJECT>\tdelete object (deprecated), see --remove
  --scale <OBJECT>\t\t\tscale object. Use only with --rpl, --replicas
  --rpl <NUMBER>, --replicas <NUMBER>\tNumber of replicas to scale
  --r, <OBJECT>, --remove <OBJECT>\tremove (delete) object
  --wat\t\t\t\t\tManual about object operations (like kubectl explain)
  -o <OUTPUT>, --output <OUTPUT>\toutput format, based on original kubectl types:
\t\t\t\t\t json|yaml|wide|custom-
\t\t\t\t\t columns=...|custom-columns-file=...|go-
\t\t\t\t\t template=...|go-template-
\t\t\t\t\t file=...|jsonpath=...|jsonpath-file=...]
  -t, --trace\t\t\t\tprint real kubectl commands
  -v, --version\t\t\t\tshow version of application
  --labels LABELS\t\t\tUse label to filter out objects
''')
