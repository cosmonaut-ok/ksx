#!/usr/bin/env python3

from os.path import join, realpath, dirname
import subprocess, argparse
from werbs import Werbs

parser = argparse.ArgumentParser()

parser.add_argument("describe_ingress_pos", help="Get ingress", type=str, nargs='*')

# command arguments group
cagroup=parser.add_argument_group('Werb arguments')

# service arguments group
sagroup=parser.add_argument_group('Service arguments')

cagroup.add_argument('-l', '--list',
                    action='store_true',
                    dest='list',
                    help='Suppress Output'
                    )

sagroup.add_argument('-o', '--output',
                    type=str,
                    dest='output',
                    help='output format json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]'
                    )

sagroup.add_argument('-A', '--all-namespaces',
                    action='store_true',
                    dest='all_namespaces',
                    help='Operate with resources from all namespaces'
                    )

cagroup.add_argument('-d', '--describe',
                    type=str,
                    dest='describe',
                    help='describe ingress'
                    )

cagroup.add_argument('-e', '--edit',
                    type=str,
                    dest='edit',
                    help='edit ingress'
                    )

sagroup.add_argument('-t', '--trace',
                    action='store_true',
                    dest='trace',
                    help='trace real kubectl commands'
                    )

sagroup.add_argument('--labels',
                    type=str,
                    dest='labels',
                    help='Use label to filter out resources'
                    )

cagroup.add_argument('--wat',
                    action='store_true',
                    dest='wat',
                    help='Manual about kubernetes ingress'
                    )

sagroup.add_argument('-v', '--version',
                    action='store_true',
                    dest='version',
                    help='show version of application'
                    )

args = parser.parse_args()

global out_suffix, kctl_bin, werbs, ingress_shell

kctl_bin = "kubectl"
ingress_shell = "/bin/sh"

config=join(dirname(realpath(__file__)), 'ks.json')

werbs = Werbs(config_path=config, out_format=args.output, labels=args.labels, kctl_bin=kctl_bin, all_ns=args.all_namespaces, trace=args.trace)

if args.output:
    out_suffix = " -o " + args.output
else:
    out_suffix = ""

def shell_to_ingress(name):
    cmd = "{} exec --stdin --tty ingress/{} -- {}".format(kctl_bin, name, ingress_shell)
    if args.trace:
        ns = werbs.current_namespace()
        ctx = werbs.current_context()
        print("cmd: `{}`; namespace: `{}`; context: `{}`".format(cmd, ns, ctx))

    subprocess.call(cmd, shell=True)

def shell_to_ingress_container(ingress_name, container_name):
    cmd = "{} exec --stdin --tty ingress/{} --container {} -- {}".format(kctl_bin, ingress_name, container_name, ingress_shell)
    if args.trace:
        ns = werbs.current_namespace()
        ctx = werbs.current_context()
        print("cmd: `{}`; namespace: `{}`; context: `{}`".format(cmd, ns, ctx))

    subprocess.call(cmd, shell=True)


def containers_list(name):
    cmd = "{} get ingress/{}".format(kctl_bin, name)
    cmd += " -o=jsonpath='{.spec.containers[*].name}'"
    out = subprocess.getoutput(cmd)
    return out

    
if args.list:
    werbs.print_of("ingress")
elif args.describe:
    werbs.describe_of("ingress/{}".format(args.describe))
elif args.edit:
    werbs.edit_of("ingress/{}".format(args.edit))
elif args.wat:
    werbs.explain_of("ingress")
elif args.version:
    werbs.print_version()
elif args.describe_ingress_pos:
    werbs.describe_of("ingress/{}".format(args.describe_ingress_pos[0]))
else: # default action is "get namespaces"
    werbs.print_of("ingress")
