#!/usr/bin/env python3

import subprocess, argparse
from werbs import Werbs

parser = argparse.ArgumentParser()

parser.add_argument("use_namespace_pos", help="Use namespace as current", type=str, nargs='*')

parser.add_argument('-l', '--list',
                    action='store_true',
                    dest='list',
                    help='Suppress Output'
                    )

parser.add_argument('-o', '--output',
                    type=str,
                    dest='output',
                    help='output format json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]'
                    )

parser.add_argument('-c', '--current-namespace',
                    action='store_true',
                    dest='current_namespace',
                    help='Print current namespace'
                    )

parser.add_argument('-u', '--use-namespace',
                    type=str,
                    dest='use_namespace',
                    help='Use namespace as current'
                    )

parser.add_argument('-t', '--trace',
                    action='store_true',
                    dest='trace',
                    help='trace real kubectl commands'
                    )

args = parser.parse_args()

global out_suffix, kctl_bin, werbs

kctl_bin = "kubectl"

if args.output:
    out_suffix = " -o " + args.output
else:
    out_suffix = ""

werbs = Werbs(out_suffix, kctl_bin=kctl_bin, trace=args.trace)


def print_contexts():
    cmd = "{} config get-contexts".format(kctl_bin)
    cmd += out_suffix
    subprocess.call(cmd, shell=True)


def print_namespaces():
    cmd = "{} get namespaces".format(kctl_bin)
    cmd += out_suffix
    subprocess.call(cmd, shell=True)


def set_current_namespace(ns):
    curr_context = werbs.current_context()
    cmd = "kubectl config set-context {} --namespace {}".format(curr_context, ns)
    subprocess.call(cmd, shell=True)

if args.list:
    werbs.print_of("namespaces")
elif args.current_namespace:
    print(werbs.current_namespace())
elif args.use_namespace:
    set_current_namespace(args.use_namespace)
elif args.use_namespace_pos:
    set_current_namespace(args.use_namespace_pos[0])
else: # default action is "get namespaces"
    werbs.print_of("namespaces")

