#!/usr/bin/env python3

import os, subprocess, argparse
from werbs import Werbs
from os.path import join, realpath, dirname

parser = argparse.ArgumentParser()

parser.add_argument("use_namespace_pos", help="Use namespace as current", type=str, nargs='*')

# command arguments group
cagroup=parser.add_argument_group('Werb arguments')

# service arguments group
sagroup=parser.add_argument_group('Service arguments')

cagroup.add_argument('-l', '--list',
                    action='store_true',
                    dest='list',
                    help='Suppress Output'
                    )

sagroup.add_argument('-o', '--output',
                    type=str,
                    dest='output',
                    help='output format json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...]'
                    )

cagroup.add_argument('-c', '--current-namespace',
                    action='store_true',
                    dest='current_namespace',
                    help='Print current namespace'
                    )

cagroup.add_argument('-u', '--use-namespace',
                    type=str,
                    dest='use_namespace',
                    help='Use namespace as current'
                    )

cagroup.add_argument('-d', '--describe',
                    type=str,
                    dest='describe',
                    help='describe namespace'
                    )

sagroup.add_argument('-t', '--trace',
                    action='store_true',
                    dest='trace',
                    help='trace real kubectl commands'
                    )

sagroup.add_argument('-v', '--version',
                    action='store_true',
                    dest='version',
                    help='show version of application'
                    )

cagroup.add_argument('--wat',
                    action='store_true',
                    dest='wat',
                    help='Manual about kubernetes PVC'
                    )

args = parser.parse_args()

global out_suffix, kctl_bin, werbs

kctl_bin = "kubectl"

if args.output:
    out_suffix = " -o " + args.output
else:
    out_suffix = ""

werbs = Werbs(out_suffix, config_path=join(dirname(realpath(__file__)), 'ks.json'))


def print_contexts():
    cmd = "{} config get-contexts".format(kctl_bin)
    cmd += out_suffix
    subprocess.call(cmd, shell=True)


def print_namespaces():
    cmd = "{} get namespaces".format(kctl_bin)
    cmd += out_suffix
    subprocess.call(cmd, shell=True)


def set_current_namespace(ns):
    curr_context = werbs.current_context()
    cmd = "kubectl config set-context {} --namespace {}".format(curr_context, ns)
    if args.trace:
        ns = werbs.current_namespace()
        ctx = werbs.current_context()
        print("cmd: `{}`; namespace: `{}`; context: `{}`".format(cmd, ns, ctx))

    subprocess.call(cmd, shell=True)


if args.list:
    werbs.print_of("namespaces")
elif args.current_namespace:
    print(werbs.current_namespace())
elif args.use_namespace:
    set_current_namespace(args.use_namespace)
elif args.describe:
    werbs.describe_of("namespaces/{}".format(args.describe))
elif args.wat:
    werbs.explain_of("namespaces")
elif args.use_namespace_pos:
    set_current_namespace(args.use_namespace_pos[0])
else: # default action is "get namespaces"
    werbs.print_of("namespaces")
